syntax = "proto3";

option java_package = "io.grpc.examples.routeguide";
//option java_multiple_files = true;

// 定义 RPC 服务
service RouteGuide {

  // 定义 RPC 方法
  // 1. 最普通的 阻塞式调用的方法，最符合原始的 rpc 定义的形式
  rpc GetFeature(Point) returns (Feature) {}

  // 2. 服务端流式 RPC 调用
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // 3. 客户端流式 RPC 调用
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // 4. 服务端、客户端 都是流式 RPC 调用
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}

}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
// 点  由 经度和纬度 表示
message Point {
  int32 latitude = 1; // 经度
  int32 longitude = 2; // 纬度
}

// 一个长方形区域，由两个对角线的点表示
message Rectangle {
  Point lo = 1; // 对角线的一个点
  Point hi = 2; // 对角线的另一个点
}

//
message Feature {
  string name = 1; // Feature 的名字
  Point location = 2; // Feature 的坐标点
}

// Not used in the RPC.  Instead, this is here for the form serialized to disk.
message FeatureDatabase {
  repeated Feature feature = 1;
}

// 在某一个点发出的一条消息
message RouteNote {
  Point location = 1; // 点，坐标位置
  string message = 2; // 消息
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}